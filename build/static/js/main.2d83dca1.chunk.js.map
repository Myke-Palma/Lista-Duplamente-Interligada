{"version":3,"sources":["DoubleLinkedList.js","App.js","serviceWorker.js","index.js"],"names":["Node","data","prevNode","nextNode","DoubleLinkedList","head","tail","removeNodeAtStart","undefined","removeNodeAtEnd","addNodeAtStart","newNode","tempHead","addNodeAtEnd","tempTail","addNodeAfter","currNode","console","log","addNodeBefore","removeNode","node","readAll","asArray","array","push","App","useState","list","setList","nodeData","setNodeData","selectedNode","setSelectedNode","counter","setCounter","className","value","onChange","e","target","map","i","key","type","checked","name","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2d83dca1.chunk.js","sourcesContent":["function Node() {\r\n\r\n    let data;\r\n    let prevNode = null;//if its null = head\r\n    let nextNode = null;//if its null = tail\r\n    return {\r\n        data,\r\n        prevNode,\r\n        nextNode\r\n    }\r\n}\r\n\r\nfunction DoubleLinkedList() {\r\n\r\n    let head;\r\n    let tail;\r\n\r\n    function addNodeAtStart(data) {//Done!\r\n\r\n        const newNode = new Node();\r\n\r\n        newNode.data = data;\r\n\r\n        if (head !== undefined) {\r\n            let tempHead = head;\r\n            head.prevNode = newNode;\r\n            head = newNode;\r\n            head.nextNode = tempHead;\r\n        }\r\n        else {\r\n            head = newNode;\r\n            tail = newNode;\r\n        }\r\n\r\n        return newNode;\r\n    }\r\n\r\n    function addNodeAtEnd(data) {\r\n\r\n        const newNode = new Node();\r\n\r\n        newNode.data = data;\r\n\r\n        if (tail !== undefined) {\r\n            let tempTail = tail;\r\n            tail.nextNode = newNode;\r\n            tail = newNode;\r\n            tail.prevNode = tempTail;\r\n        }\r\n        else {\r\n            tail = newNode;\r\n            head = newNode;\r\n        }\r\n\r\n        return newNode;\r\n    }\r\n\r\n    function addNodeBefore(data, nextNode) {\r\n\r\n        if (head === undefined) {\r\n            console.log(\"Empty List, Can't add node before empty list\");\r\n            return;\r\n        }\r\n\r\n        let currNode = tail;\r\n\r\n        while (currNode !== nextNode) {\r\n            if (currNode === head) {\r\n                console.log(\"Selected node does not exist\")\r\n                return;\r\n            }\r\n            currNode = currNode.prevNode;\r\n        }\r\n        const newNode = new Node();\r\n\r\n        newNode.data = data;\r\n\r\n        newNode.nextNode = nextNode;\r\n        newNode.prevNode = nextNode.prevNode;\r\n        nextNode.prevNode = newNode;\r\n\r\n        if (head === nextNode) {\r\n            head = newNode;\r\n        }\r\n        else {\r\n            newNode.prevNode.nextNode = newNode;\r\n        }\r\n\r\n        return newNode;\r\n    }\r\n\r\n    function addNodeAfter(data, prevNode) {\r\n\r\n        if (head === undefined) {\r\n            console.log(\"Empty List, can't add node after an empty list\");\r\n            return;\r\n        }\r\n\r\n        let currNode = head;\r\n\r\n        while (currNode !== prevNode) {\r\n            if (currNode === tail) {\r\n                console.log(\"Selected node does not exist\");\r\n                return;\r\n            }\r\n            currNode = currNode.nextNode;\r\n        }\r\n\r\n        const newNode = new Node();\r\n        newNode.data = data;\r\n\r\n        newNode.prevNode = prevNode;\r\n        newNode.nextNode = prevNode.nextNode;\r\n        prevNode.nextNode = newNode;\r\n\r\n        if (tail === prevNode) {\r\n            tail = newNode;\r\n        }\r\n        else {\r\n            newNode.nextNode.prevNode = newNode;\r\n        }\r\n\r\n        return newNode;\r\n    }\r\n\r\n    function removeNodeAtStart() {\r\n        if (head !== undefined) {\r\n            if(head===tail){\r\n                head = undefined;\r\n                tail = undefined;\r\n                return;\r\n            }\r\n            head = head.nextNode;\r\n            head.prevNode = null;\r\n        }\r\n    }\r\n\r\n    function removeNodeAtEnd() {\r\n        if (tail !== undefined) {\r\n            if(head===tail){\r\n                head = undefined;\r\n                tail = undefined;\r\n                return;\r\n            }\r\n            tail = tail.prevNode;\r\n            tail.nextNode = null;\r\n        }\r\n    }\r\n\r\n    function removeNode(node) {\r\n\r\n        if (head === undefined) {\r\n            return;\r\n        }\r\n        let currNode = tail;\r\n\r\n        while (currNode !== node) {\r\n            if (currNode === head) {\r\n                return;\r\n            }\r\n            currNode = currNode.prevNode;\r\n        }\r\n\r\n        if (currNode === head) {\r\n            removeNodeAtStart();\r\n            return;\r\n        }\r\n\r\n        if (currNode === tail) {\r\n            removeNodeAtEnd();\r\n            return;\r\n        }\r\n\r\n        node.prevNode.nextNode = node.nextNode;\r\n        node.nextNode.prevNode = node.prevNode;\r\n\r\n    }\r\n\r\n    function readAll() {\r\n\r\n        console.log(\"start Read\");\r\n\r\n        if (head === undefined) {\r\n            console.log(\"empty list\");\r\n            return;\r\n        }\r\n\r\n        let currNode = head;\r\n\r\n        while (currNode !== tail) {\r\n            console.log('>> ', currNode.data);\r\n            currNode = currNode.nextNode;\r\n        }\r\n        console.log('>> ', tail.data);\r\n\r\n        console.log(\"Ended Read\");\r\n\r\n    }\r\n\r\n    // function getHead(){\r\n    //     return head;\r\n    // }\r\n\r\n    function asArray(){\r\n\r\n        const array = [];\r\n\r\n        if (head === undefined) {\r\n            console.log(\"empty list\");\r\n            return array;\r\n        }\r\n\r\n        let currNode = head;\r\n\r\n        while (currNode !== tail) {\r\n            array.push(currNode);\r\n            currNode = currNode.nextNode;\r\n        }\r\n        array.push(currNode);\r\n        return array;\r\n    }\r\n\r\n    return {\r\n        addNodeAtStart,\r\n        addNodeAtEnd,\r\n        addNodeAfter,\r\n        addNodeBefore,\r\n        removeNodeAtStart,\r\n        removeNodeAtEnd,\r\n        removeNode,\r\n        readAll,\r\n        //getHead,\r\n        asArray\r\n    }\r\n}\r\n\r\nexport {DoubleLinkedList}","import React, { useState } from 'react';\nimport './App.css';\nimport { DoubleLinkedList } from './DoubleLinkedList.js';\n\nfunction App() {\n\n  const [list, setList] = useState(new DoubleLinkedList());\n  const [nodeData, setNodeData] = useState('');\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [counter, setCounter] = useState(0);\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"container p-2\">\n        <div className=\"row mb-4\">\n          <div className=\"col-2\">\n            <label>New Node name:</label>\n          </div>\n          <div className=\"col-8\">\n            <input className=\"form-control\" value={nodeData} onChange={(e) => setNodeData(e.target.value)}></input>\n          </div>\n          <div className=\"col-2\"></div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-8\">\n            <table className=\"table\">\n              <thead>\n                <tr>\n                  <th>Select</th>\n                  <th>Node data</th>\n                </tr>\n              </thead>\n              <tbody>\n                {\n                  list.asArray().map((node,i) => {\n                    return(\n                    <tr key={i}>\n                      <td><input type=\"radio\" checked={node===selectedNode} name=\"nodes\" onChange={() => setSelectedNode(node)}></input></td>\n                      <td>{node.data}</td>\n                    </tr>\n                    )\n                  }\n                    \n                  )\n                }\n              </tbody>\n\n            </table>\n          </div>\n          <div className=\"col-4\">\n            <div className=\"row mb-1\">\n              <button className=\"btn btn-light\" onClick={() => {\n                list.addNodeAtStart(nodeData);\n                setList(list);\n                setCounter(counter + 1);\n              }}>Inserir no início</button>\n            </div>\n            <div className=\"row mb-1\">\n              <button className=\"btn btn-light\" onClick={() => {\n                list.addNodeAtEnd(nodeData);\n                setList(list);\n                setCounter(counter + 1);\n              }}>Inserir no fim</button>\n            </div>\n            <div className=\"row mb-1\" >\n              <button className=\"btn btn-light\"onClick={() => {\n                list.addNodeBefore(nodeData, selectedNode);\n                setList(list);\n                setCounter(counter + 1);\n              }}>Inserir antes de</button>\n            </div>\n            <div className=\"row mb-1\">\n              <button className=\"btn btn-light\"onClick={() => {\n                list.addNodeAfter(nodeData, selectedNode);\n                setList(list);\n                setCounter(counter + 1);\n              }}>Inserir depois de</button>\n            </div>\n            <div className=\"row mb-1\">\n              <button className=\"btn btn-light\" onClick={() => {\n                list.removeNodeAtStart();\n                setList(list);\n                setCounter(counter - 1);\n              }}>Remover do inicio</button>\n            </div>\n            <div className=\"row mb-1\" >\n              <button className=\"btn btn-light\"onClick={() => {\n                list.removeNodeAtEnd();\n                setList(list);\n                setCounter(counter - 1);\n              }}>Remover do fim</button>\n            </div>\n            <div className=\"row mb-1\">\n              <button className=\"btn btn-light\" onClick={() => {\n                list.removeNode(selectedNode);\n                setList(list);\n                setSelectedNode(null);\n                setCounter(counter - 1);\n              }}>Remover selecionado</button>\n            </div>\n          </div>\n\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}